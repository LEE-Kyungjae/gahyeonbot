name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: "Deployment target environment (blue, green, auto)"
        required: false
        default: "auto"

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Gradle Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean test

  tag-version:
    name: Create Release Tag
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Bump & Tag
        id: tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          release_branches: main

  build-image:
    name: Build & Push Image
    needs:
      - test
      - tag-version
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && needs.tag-version.outputs.tag != ''
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
      tag: ${{ needs.tag-version.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Build Fat JAR
        run: ./gradlew clean shadowJar -x test
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image metadata
        id: meta
        run: |
          IMAGE_ID=${{ env.REGISTRY }}/$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "image=${IMAGE_ID}" >> "${GITHUB_OUTPUT}"
      - name: Build image
        run: |
          docker build \
            -t ${{ steps.meta.outputs.image }}:${{ needs.tag-version.outputs.tag }} \
            -t ${{ steps.meta.outputs.image }}:latest \
            .
      - name: Push image
        run: |
          docker push ${{ steps.meta.outputs.image }}:${{ needs.tag-version.outputs.tag }}
          docker push ${{ steps.meta.outputs.image }}:latest

  deploy:
    name: Deploy (Blue/Green)
    needs: build-image
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Resolve deployment target
        id: target
        run: |
          TARGET="${{ github.event.inputs.deploy_target }}"
          if [[ -z "${TARGET}" ]]; then
            TARGET="auto"
          fi
          echo "target=${TARGET}" >> "${GITHUB_OUTPUT}"
      - name: Upload deployment script
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: "scripts/remote-deploy.sh"
          target: "/tmp"
      - name: Execute deployment
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            chmod +x /tmp/scripts/remote-deploy.sh
            /tmp/scripts/remote-deploy.sh "${{ steps.target.outputs.target }}" "${{ needs.build-image.outputs.image }}" "${{ needs.build-image.outputs.tag }}"
        envs: TOKEN,APPLICATION_ID,SPOTIFY_CLIENT_ID,SPOTIFY_CLIENT_SECRET,POSTGRES_PROD_PASSWORD,SPRING_PROFILES_ACTIVE
        env:
          TOKEN: ${{ secrets.TOKEN }}
          APPLICATION_ID: ${{ secrets.APPLICATION_ID }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          POSTGRES_PROD_PASSWORD: ${{ secrets.POSTGRES_PROD_PASSWORD }}
          SPRING_PROFILES_ACTIVE: prod
